{"version":3,"sources":["components/Header.js","components/TypeContext.js","components/Button.js","components/Type.js","components/NumberContext.js","components/Input.js","components/Facts.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","TypeContext","createContext","TypeProvider","props","useState","type","setType","Provider","value","children","Button","changeType","name","useContext","className","onClick","event","Type","console","log","currentTarget","textContent","buttons","id","map","item","key","NumberContext","NumberProvider","number","setNumber","Input","onChange","target","autoComplete","required","Facts","fact","setFact","isLoading","setLoading","useEffect","fetch","then","resp","text","data","style","display","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.edcd75ad.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div>\r\n            <h1>random facts</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, createContext} from 'react'\r\n\r\nexport const TypeContext = createContext();\r\n\r\nexport function TypeProvider(props) {\r\n    \r\n    const [type, setType] = useState(\"number\");\r\n\r\n    return(\r\n    <TypeContext.Provider value={[type, setType]}>\r\n        {props.children}\r\n    </TypeContext.Provider>\r\n    )\r\n}","import React, {useContext}  from 'react';\r\nimport {TypeContext} from \"./TypeContext\";\r\n\r\nexport default function Button({changeType, name}) {\r\n\r\n    const [type] = useContext(TypeContext);\r\n\r\n    return (\r\n        <div>\r\n            <button \r\n                className={`type__buttons__btn ${type === name ?  'active' : \"\"}`}\r\n                onClick={(event) => changeType(event)}\r\n            >\r\n                {name}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useContext} from 'react'\r\nimport Button from './Button'\r\nimport { TypeContext } from './TypeContext';\r\n\r\nexport default function Type() {\r\n\r\n    const  [type, setType] = useContext(TypeContext);\r\n\r\n    const types = [\r\n        {\r\n            id: 1,\r\n            name:'number'\r\n        }, \r\n         {\r\n            id: 2,\r\n            name:'year'\r\n        }, \r\n         {\r\n            id: 3,\r\n            name:'math'\r\n        }];\r\n\r\n\r\n    const changeType = (event) => {\r\n        console.log(event.currentTarget.textContent);\r\n        setType(event.currentTarget.textContent);\r\n    }\r\n\r\n\r\n    const buttons = types.map(item => (\r\n        <Button \r\n            key={item.id} \r\n            name={item.name}\r\n            changeType={changeType}\r\n        />\r\n        ))\r\n\r\n\r\n    return (\r\n        <div className=\"type\">\r\n            <h2 className=\"type__header\">Choose the type of input</h2>\r\n            <div className=\"type__buttons\">\r\n                {buttons}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, createContext}from \"react\";\r\n\r\n\r\nexport const NumberContext = createContext();\r\n\r\nexport function NumberProvider(props) {\r\n    const [number, setNumber] = useState(\"\");\r\n\r\n    return(\r\n    <NumberContext.Provider value={[number, setNumber]}>\r\n        {props.children}\r\n    </NumberContext.Provider>\r\n    )\r\n}\r\n\r\n","import React, {useContext} from 'react'\r\nimport {NumberContext} from \"./NumberContext\";\r\n\r\n\r\nexport default function Input() {\r\n\r\n    const [number, setNumber] = useContext(NumberContext);\r\n\r\n    const changeNumber = (event) => {\r\n        setNumber(event.target.value);\r\n        console.log(event.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div  className=\"input\">\r\n            <input\r\n                type=\"number\"\r\n                value={number}\r\n                onChange={changeNumber}\r\n                autoComplete=\"off\"\r\n                required\r\n              />\r\n\r\n            <label  className=\"label-number\">Enter a Number</label>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useContext, useEffect} from 'react'\r\nimport {TypeContext} from \"./TypeContext\";\r\nimport {NumberContext} from \"./NumberContext\";\r\n\r\nexport default function Facts() {\r\n\r\n    const [fact, setFact]=useState(\"\");\r\n    const [isLoading, setLoading]=useState(false);\r\n    const [type] = useContext(TypeContext);\r\n    const [number] = useContext(NumberContext);\r\n\r\n    useEffect(() => {\r\n        let url = \"http://numbersapi.com\";\r\n        setLoading(true)\r\n        fetch(`${url}${number === \"\" ? \"\" : '/'+number}${type === \"number\" ? \"\" : \"/\"+type}`)\r\n            .then((resp) => resp.text())\r\n            .then((data) => {\r\n                console.log(\"data\");\r\n                number !== \"\" && setFact(data);\r\n                setLoading(false);\r\n            })\r\n    },[type, number])\r\n\r\n\r\n    return (\r\n        <div className=\"fact\" id=\"fact\"\r\n        style={number === \"\"  || fact === \"\" ? {display:\"none\"} : {display:\"block\"}}>\r\n\r\n            <p className=\"fact__text \" id=\"factText\">{fact}</p>\r\n\r\n            <div className=\"loaders\">\r\n                <div style={isLoading ? {display: \"block\"}:{display: 'none'}} className=\"loader\"></div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Type from './Type'\r\nimport Input from './Input'\r\nimport Facts from './Facts'\r\nimport {TypeProvider} from \"./TypeContext\";\r\nimport {NumberProvider} from \"./NumberContext\";\r\n\r\n\r\nexport default function Main() {\r\n    return (\r\n        <main>\r\n            <TypeProvider>\r\n            <NumberProvider>\r\n                <Type />\r\n                <Input />\r\n                <Facts />\r\n            </NumberProvider>\r\n            </TypeProvider>\r\n        </main>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Header from \"./components/Header\"\r\nimport Main from \"./components/Main\"\r\nimport './styles/main.scss'\r\n\r\n\r\nexport default function App() {\r\n    return (\r\n        <div  className=\"page\">\r\n            <Header />\r\n            <Main />\r\n        </div>\r\n    )\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}